local h = require("utils.helper")

local map = h.map

map("n", "Q", "<nop>")
map({ "n", "i", "v" }, "<Up>", "<nop>")
map({ "n", "i", "v" }, "<Down>", "<nop>")
map({ "n", "i", "v" }, "<Left>", "<nop>")
map({ "n", "i", "v" }, "<Right>", "<nop>")
map("n", ";", ":")
map("n", "q", h.close_quickfix_window)
map("n", "H", "^")
map("n", "L", "$")
map("n", "n", h.search_for_pattern)
map("n", "N", "Nzzzv")
map("n", "gb", "<C-o>")
map("n", "gp", h.add_fun)
map("n", "<Left>", h.execute_file)
map("n", "<bs>", [[ciw]])
map("n", "<CR>", "i<CR>")
map("n", "<Home>", ":Explore<CR>")
map("n", "=", h.main_menu)
map("n", "<F8>", h.pick_theme)
map("n", "<F12>", h.run_binary)
map("n", "<leader>cf", "", { callback = h.convert_function_to_arrow })
map("n", "<leader>h", "^")
map("n", "<leader>l", "$")
map("n", "<leader>jm", h.repeat_cmd)
map("n", "<leader>o", "O<Esc>O<Esc>")
map("n", "<leader>=ap", "ma=ap'a")
map("x", "<leader>p", [["_dP]])
map("n", "<leader>gp", h.add_print)
map("n", "<leader>k", "<cmd>lnext<CR>zz")
map("n", "<leader>j", "<cmd>lprev<CR>zz")
map("n", "<leader>s", [[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gc<Left><Left><Left>]])
map("n", "<leader>x", h.show_action_window)
map("n", "<leader>ca", vim.lsp.buf.code_action)
map("n", "<leader>a", h.insert_assert)
map("n", "<leader>cl", h.insert_below)
map("n", "<leader>fw", "<cmd>Telescope live_grep<CR>")
map("n", "<leader>fb", "<cmd>Telescope buffers<CR>")
map("n", "<leader>fh", "<cmd>Telescope help_tags<CR>")
map("n", "<leader>ma", "<cmd>Telescope marks<CR>")
map("n", "<leader>fo", "<cmd>Telescope oldfiles<CR>")
map("n", "<leader>fz", "<cmd>Telescope current_buffer_fuzzy_find<CR>")
map("n", "<leader>cm", "<cmd>Telescope git_commits<CR>")
map("n", "<leader>gt", "<cmd>Telescope git_status<CR>")
map("n", "<leader><leader>", "<cmd>Telescope find_files<cr>")
map("n", "<leader>fa", "<cmd>Telescope find_files follow=true no_ignore=true hidden=true<CR>")
map("n", "<leader><CR>", h.set_telescope_buffers_config)
map("n", "<leader>A", h.insert_assertion_at_function_start)
map("n", "<C-j>", "<cmd>cprev<CR>zz")
map("n", "<C-k>", "<cmd>cnext<CR>zz")
map("n", "<C-Up>", "<cmd>resize +2<cr>")
map("n", "<C-Down>", "<cmd>resize -2<cr>")
map("n", "<C-Left>", "<cmd>vertical resize -2<cr>")
map("n", "<C-Right>", "<cmd>vertical resize +2<cr>")
map("n", "<C-d>", "<C-d>zz")
map("n", "<C-u>", "<C-u>zz")


map({ "n", "v" }, "Q", function()
    vim.cmd('normal! "Kyy')
end)

map({ "n", "v" }, "<leader>Q", function()
    if vim.fn.getreg("k") ~= "" then
        vim.cmd('normal! "kp')
    end
    vim.fn.setreg("k", "")
end)

map({ "n", "v" }, "Y", [["+Y]])
-- map({ "n", "v" }, "P", '"+p')
map({ "n", "v" }, "<leader>d", '"_d')
-- map({ "n", "v" }, "Q", "<Esc>:update<CR>")

map("v", "J", ":m '>+1<CR>gv=gv")
map("v", "K", ":m '<-2<CR>gv=gv")
map("v", "<Tab>", ">gv")
map("v", "<S-Tab>", "<gv")
map("v", "<leader>mv", h.create_component)
map("i", "<C-p>", "<C-r>0")
map("i", "<C-y>", "<C-r>0")
map("i", "<C-p>", "<C-r>1")
map("i", "<C-Y>", "<C-r>1")
map("i", "<C-h>", "<C-o>h")
map("i", "<C-j>", "<C-o>j")
map("i", "<C-k>", "<C-o>k")
map("i", "<C-l>", "<C-o>l")
map("i", "jj", "<Esc>")
map("i", "<C-S-v>", h.paste_system_clipboard)

-- map("n", "<leader>tf", "<Plug>PlenaryTestFile", { noremap = false, silent = false })
-- map("n", "J", "mzJ`z")
-- map("n", "<F5>", "ddp")
-- map("n", "<F6>", "ddP")
-- map("v", "H", "0", { desc = "Go to beginning of line" })
-- map("v", "L", "$", { desc = "Go to end of line" })
-- map("v", "<leader>mb", extract.set_barrel, { desc = "Extract component {Name}.tsx and update barrel index.ts" })
map("n", "<Tab>", ">>")
map("n", "<S-Tab>", "<<")
